{"version":3,"sources":["dal/api.js","redux/CompaniesReducer.js","redux/AuthReduces.js","components/Auth.jsx","components/Companies.jsx","App.js","reportWebVitals.js","redux/redux-store.js","index.js","components/Auth.module.css","components/Companies.module.css"],"names":["instanse","axios","baseURL","withCredentials","token","Api","houseData","getCompanies","get","headers","getHouse","company_id","page","perPage","auth","logIn","email","password","post","then","response","data","access","window","SET_COMPANIES_DATA","SET_SELECTED_COMPANY_ID","SET_HOUSE_DATA","SET_CURRENT_PAGE","CompaniesDefaulState","companiesData","currentCompanyId","nextPage","currentPage","lastPage","prevPage","setHouseDataSucsess","type","setSelectedCompanyId","SET_AUTH_USER_DATA","authDefaulState","isAuth","Auth","onSubmit","formData","props","this","AuthReduxForm","React","Component","reduxForm","form","handleSubmit","Field","name","component","className","s","input","loginBtn","connect","state","login","dispatch","userAuthdata","id","Companies","companiesField","map","el","houseField","address","prevProps","prevState","snapshot","length","setHouseData","setState","tdAdress","reestrFlatCount","createdAt","slice","CompanySelect","onChange","e","console","log","target","selectedOptions","metaDataHouseToNull","table","paginatorBox","button","buttonLeft","onClick","buttonRigth","links","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","redusers","combineReducers","action","formReducer","store","createStore","applyMiddleware","thunkMidlewarenk","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.571a46d3.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instanse = axios.create({\r\n    baseURL: \"http://test-alpha.reestrdoma.ru/api/\",\r\n    withCredentials: true\r\n\r\n})\r\nlet token = \"\"\r\n\r\nexport const Api = {\r\n    houseData: {\r\n        getCompanies() {\r\n            return instanse.get(`reestrdoma/companies/`, {\r\n                headers: {'Authorization': `Bearer ${token}`}\r\n            })\r\n        },\r\n        getHouse(company_id = 1714, page = 1, perPage = 10) {\r\n            return instanse.get(`reestrdoma/company/houses/${company_id}/?page=${page}&perPage=${perPage}`, {\r\n                headers: {'Authorization': `Bearer ${token}`}\r\n            })\r\n        }\r\n    },\r\n    auth: {\r\n        logIn(email, password) {\r\n            return instanse.post(`login/`, {\r\n                \"username\": `${email}`,\r\n                \"password\": `${password}`\r\n            }).then(response => {\r\n                token = response.data.data.token.access\r\n                return token\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nwindow.Api = Api\r\nwindow.token = token","import {Api} from \"../dal/api\";\r\n\r\nlet SET_COMPANIES_DATA = \"SET_COMPANIES_DATA\"\r\nlet SET_SELECTED_COMPANY_ID = \"SET_SELECTED_COMPANY_ID\"\r\nlet SET_HOUSE_DATA = \"SET_HOUSE_DATA\"\r\nlet SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\n\r\nlet CompaniesDefaulState = {\r\n    companiesData: [],\r\n    houseData: [],\r\n    currentCompanyId: \"\",\r\n    nextPage: 0,\r\n    currentPage: 0,\r\n    lastPage: 0,\r\n    prevPage: 0\r\n\r\n}\r\n\r\nexport const CompaniesReducer = (state = CompaniesDefaulState, action) => {\r\n    let copyState;\r\n    switch (action.type) {\r\n        case SET_COMPANIES_DATA:\r\n            copyState = {\r\n                ...state,\r\n                companiesData: [...action.companiesData]\r\n            }\r\n            return copyState\r\n        case SET_HOUSE_DATA:\r\n            copyState = {\r\n                ...state,\r\n                houseData: [...action.houseData],\r\n                nextPage: action.nextPage,\r\n                currentPage: action.currentPage,\r\n                lastPage: action.lastPage,\r\n                prevPage: action.prevPage\r\n            }\r\n            return copyState\r\n        case SET_SELECTED_COMPANY_ID:\r\n            copyState = {\r\n                ...state,\r\n                currentCompanyId: action.currentCompanyId\r\n            }\r\n            return copyState\r\n        case SET_CURRENT_PAGE:\r\n            copyState = {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport let setCompaniesDataSucsess = (companiesData) => ({\r\n    type: SET_COMPANIES_DATA,\r\n    companiesData\r\n})\r\nexport let setHouseDataSucsess = (houseData, currentPage, lastPage, nextPage, prevPage) => ({\r\n    type: SET_HOUSE_DATA,\r\n    houseData, nextPage, currentPage, lastPage, prevPage\r\n})\r\nexport let setSelectedCompanyId = (currentCompanyId) => ({\r\n    type: SET_SELECTED_COMPANY_ID,\r\n    currentCompanyId\r\n})\r\nexport let setHouseData = (company_id, page) => {\r\n    return (dispatch) => {\r\n        Api.houseData.getHouse(company_id, page).then(response => {\r\n                dispatch(setHouseDataSucsess(response.data.data, response.data.links.currentPage, response.data.links.lastPage, response.data.links.nextPage, response.data.links.prevPage))\r\n            }\r\n        )\r\n    }\r\n}\r\nexport let metaDataHouseToNull = () => {\r\n    return (dispatch) => {\r\n        dispatch(setHouseDataSucsess([], null, null, null, null))\r\n        debugger\r\n    }\r\n}\r\n\r\n\r\nwindow.CompaniesDefaulState = CompaniesDefaulState\r\n\r\n\r\n","import {Api} from \"../dal/api\";\r\nimport {setCompaniesDataSucsess, setSelectedCompanyId} from \"./CompaniesReducer\";\r\n\r\nlet SET_AUTH_USER_DATA = \"SET_AUTH_USER_DATA\"\r\n\r\nlet authDefaulState = {\r\n    isAuth: false\r\n}\r\nexport const authReducer = (state = authDefaulState, action) => {\r\n    let copyState;\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n            copyState = {\r\n                ...state,\r\n                ...action.userAuthdata\r\n            }\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport let setAuthUserDataSucsess = (isAuth) => ({\r\n    type: SET_AUTH_USER_DATA,\r\n    userAuthdata: {isAuth}\r\n})\r\n\r\nexport let logIn = (login, password) => {\r\n    return (dispatch) => {\r\n        Api.auth.logIn(login, password).then(response => {\r\n                dispatch(setAuthUserDataSucsess(true))\r\n                Api.houseData.getCompanies().then(response => {\r\n                        dispatch(setCompaniesDataSucsess(response.data.data))\r\n                        dispatch(setSelectedCompanyId(response.data.data[0].id))\r\n                    }\r\n                )\r\n            }\r\n        )\r\n    }\r\n}\r\nwindow.authDefaulState = authDefaulState\r\n\r\n\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {logIn} from \"../redux/AuthReduces\";\r\nimport s from \"./Auth.module.css\"\r\n\r\nclass Auth extends React.Component{\r\n    onSubmit = (formData) => {\r\n        this.props.logIn(formData.email, formData.password)\r\n    }\r\n    render() {\r\n        if(this.props.isAuth){\r\n            return \"\"\r\n        }\r\n        return (\r\n            <div>\r\n                <span>Log in</span>\r\n                <AuthReduxForm onSubmit={this.onSubmit}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nlet authForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field type=\"text\" name={\"email\"} component={\"input\"} className={s.input}/></div>\r\n            <div><Field type=\"text\" name={\"password\"} component={\"input\"} className={s.input}/></div>\r\n            <button className={s.loginBtn}>Log in</button>\r\n        </form>\r\n\r\n    )\r\n}\r\nlet AuthReduxForm = reduxForm({\r\n    form: \"authForm\"\r\n})(authForm)\r\nlet mapStateToProps = (state)=>{\r\n    return{\r\n        isAuth: state.Auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logIn})(Auth)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    metaDataHouseToNull,\r\n    setHouseData,\r\n    setSelectedCompanyId\r\n} from \"../redux/CompaniesReducer\";\r\nimport s from \"./Companies.module.css\"\r\n\r\n\r\nclass Companies extends React.Component {\r\n    state = {\r\n        companiesField: this.props.companiesData.map((el) => <option id={el.id}>{el.name}</option>),\r\n        houseField: this.props.isAuth ? this.props.houseData.map((el) =>\r\n            <div>{el.address}</div>) : \"Войдите в учетную запись для получения данных\",\r\n        currentCompanyId: this.props.currentCompanyId\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if ((prevState.companiesField.length != this.props.companiesData.length &&\r\n            prevProps.currentCompanyId != this.props.currentCompanyId) ||\r\n            prevState.houseField.length != this.props.houseData.length ||\r\n            prevProps.currentCompanyId != this.props.currentCompanyId) {\r\n            if (this.props.currentPage) {\r\n                this.props.setHouseData(this.props.currentCompanyId, this.props.currentPage)\r\n            } else {\r\n                this.props.setHouseData(this.props.currentCompanyId)\r\n            }\r\n            this.setState({\r\n                companiesField: this.props.companiesData.map((el) => <option id={el.id}>{el.name}</option>),\r\n                currentCompanyId: this.props.currentCompanyId,\r\n                houseField: this.props.houseData.map((el) => <tr>\r\n                    <td>{el.id}</td>\r\n                    <td className={s.tdAdress}>{el.address}</td>\r\n                    <td>{el.reestrFlatCount}</td>\r\n                    <td>{el.createdAt.slice(8, 10)}.{el.createdAt.slice(5, 7)}.{el.createdAt.slice(0, 4)}</td>\r\n                </tr>)\r\n            })\r\n        } else if (prevProps.currentPage != this.props.currentPage ||\r\n                    prevProps.lastPage != this.props.lastPage) {\r\n            this.setState({\r\n                houseField: this.props.houseData.map((el) => <tr>\r\n                    <td>{el.id}</td>\r\n                    <td className={s.tdAdress}>{el.address}</td>\r\n                    <td>{el.reestrFlatCount}</td>\r\n                    <td>{el.createdAt.slice(8, 10)}.{el.createdAt.slice(5, 7)}.{el.createdAt.slice(0, 4)}</td>\r\n                </tr>)\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.isAuth){\r\n            return \"\"\r\n        }\r\n        return (\r\n            <div className={s.page}>\r\n                <select className={s.CompanySelect}\r\n                    onChange={(e) => {\r\n                        console.log(e.target.selectedOptions[0].id)\r\n                        this.props.metaDataHouseToNull()\r\n                        this.props.setSelectedCompanyId(+e.target.selectedOptions[0].id)\r\n                    }}>\r\n                    {this.state.companiesField}\r\n                </select>\r\n                {this.state.houseField.length ?\r\n                    <table className={s.table}>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Адресс</th>\r\n                            <th>Кол-вл квартир</th>\r\n                            <th>Дата добавления</th>\r\n                        </tr>\r\n                        {this.state.houseField}\r\n                    </table>: <div>У компании нет адресов</div>}\r\n\r\n                <div className={s.paginatorBox}>\r\n                    <button className={`${s.button} ${s.buttonLeft}`} onClick={() => {\r\n                        this.props.setHouseData(this.props.currentCompanyId, 1)\r\n                    }\r\n                    }>{`<<`}\r\n                    </button>\r\n                    <button className={`${s.button} ${s.buttonLeft}`} onClick={() => {\r\n                        this.props.setHouseData(this.props.currentCompanyId, this.props.prevPage)\r\n                    }\r\n                    }>{`<`}\r\n                    </button>\r\n                    {this.props.currentPage}...{this.props.lastPage}\r\n                    <button className={`${s.button} ${s.buttonRigth}`} onClick={() => {\r\n                        this.props.setHouseData(this.props.currentCompanyId, this.props.nextPage)\r\n                    }\r\n                    }>>\r\n                    </button>\r\n                    <button className={`${s.button} ${s.buttonRigth}`} onClick={() => {\r\n                        this.props.setHouseData(this.props.currentCompanyId, this.props.lastPage)\r\n                    }\r\n                    }>>>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.Auth.isAuth,\r\n        companiesData: state.Companies.companiesData,\r\n        houseData: state.Companies.houseData,\r\n        currentCompanyId: state.Companies.currentCompanyId,\r\n        prevPage: state.Companies.prevPage,\r\n        currentPage: state.Companies.currentPage,\r\n        nextPage: state.Companies.nextPage,\r\n        lastPage: state.Companies.lastPage\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {setSelectedCompanyId, setHouseData, metaDataHouseToNull})(Companies)\r\n\r\nwindow.state = Companies.state","import React from \"react\";\nimport './App.css';\nimport Auth from \"./components/Auth\";\nimport Companies from \"./components/Companies\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Auth/>\n        <Companies/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {CompaniesReducer} from \"./CompaniesReducer\";\nimport {authReducer} from \"./AuthReduces\";\nimport thunkMidlewarenk from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form'\n\nlet redusers = combineReducers({\n    Companies: CompaniesReducer,\n    Auth: authReducer,\n    form: formReducer\n})\n\nlet store = createStore(redusers, applyMiddleware(thunkMidlewarenk))\n\nwindow.store = store\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\"\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Auth_input__SyBrL\",\"loginBtn\":\"Auth_loginBtn__2SRXu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Companies_page__3EyJL\",\"CompanySelect\":\"Companies_CompanySelect__2jszs\",\"paginatorBox\":\"Companies_paginatorBox__3Xeg1\",\"table\":\"Companies_table__1eYv-\",\"tdAdress\":\"Companies_tdAdress__4dacm\",\"button\":\"Companies_button__19Xsf\",\"buttonRigth\":\"Companies_buttonRigth__lWISp\",\"buttonLeft\":\"Companies_buttonLeft__2DY7s\"};"],"sourceRoot":""}